dnl -*- Mode: sh -*-
dnl
dnl configure.in - top level autoconf file for Redland
dnl (Process this file with autoconf to produce a configure script.)
dnl
dnl $Id$
dnl
dnl Copyright (C) 2000-2001 David Beckett - http://purl.org/net/dajobe/
dnl Institute for Learning and Research Technology - http://www.ilrt.org/
dnl University of Bristol - http://www.bristol.ac.uk/
dnl 
dnl This package is Free Software or Open Source available under the
dnl following licenses (these are alternatives):
dnl   1. GNU Lesser General Public License (LGPL)
dnl   2. GNU General Public License (GPL)
dnl   3. Mozilla Public License (MPL)
dnl 
dnl See LICENSE.html or LICENSE.txt at the top of this package for the
dnl full license terms.
dnl 
dnl 


AC_REVISION($Revision$)dnl

AC_PREREQ(2.13)
AC_INIT(rdf_node.c)
AM_CONFIG_HEADER(rdf_config.h)
AC_CANONICAL_HOST


LIBRDF_VERSION_MAJOR=0
LIBRDF_VERSION_MINOR=9
LIBRDF_VERSION_RELEASE=9
LIBRDF_VERSION=$LIBRDF_VERSION_MAJOR.$LIBRDF_VERSION_MINOR.$LIBRDF_VERSION_RELEASE
LIBRDF_VERSION_INFO=`expr $LIBRDF_VERSION_MAJOR + $LIBRDF_VERSION_MINOR`:$LIBRDF_VERSION_RELEASE:$LIBRDF_VERSION_MINOR

LIBRDF_VERSION_NUMBER=`expr $LIBRDF_VERSION_MAJOR \* 10000 + $LIBRDF_VERSION_MINOR \* 100 + $LIBRDF_VERSION_RELEASE`

AC_SUBST(LIBRDF_VERSION_MAJOR)
AC_SUBST(LIBRDF_VERSION_MINOR)
AC_SUBST(LIBRDF_VERSION_RELEASE)
AC_SUBST(LIBRDF_VERSION)
AC_SUBST(LIBRDF_VERSION_INFO)
AC_SUBST(LIBRDF_VERSION_NUMBER)
AC_DEFINE_UNQUOTED(LIBRDF_VERSION_MAJOR, $LIBRDF_VERSION_MAJOR)
AC_DEFINE_UNQUOTED(LIBRDF_VERSION_MINOR, $LIBRDF_VERSION_MINOR)
AC_DEFINE_UNQUOTED(LIBRDF_VERSION_RELEASE, $LIBRDF_VERSION_RELEASE)

VERSION=${LIBRDF_VERSION}

AM_INIT_AUTOMAKE(redland, $VERSION)

dnl Checks for programs.
AC_ARG_PROGRAM
AM_SANITY_CHECK
AM_PROG_CC_STDC
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_RANLIB

AC_CHECK_PROGS(JAVA, java jre)
AC_DEFINE_UNQUOTED(JAVA_COMMAND, "$JAVA")
AC_CHECK_PROGS(PYTHON, python2.0 python1.5 python)
AC_CHECK_PROGS(PERL, perl5.6.0 perl5 perl)
AC_CHECK_PROGS(TCL, tcl)

AC_CHECK_PROG(LIBWWW_CONFIG, libwww-config, libwww-config)

AM_MISSING_PROG(ACLOCAL, aclocal, $missing_dir)
AM_MISSING_PROG(AUTOCONF, autoconf, $missing_dir)
AM_MISSING_PROG(AUTOMAKE, automake, $missing_dir)
AM_MISSING_PROG(AUTOHEADER, autoheader, $missing_dir)


AM_MAINTAINER_MODE

release_version=no
AC_ARG_ENABLE(release, [  --enable-release        Turn on optimizations.  ], \
 if test "$enableval" = "yes"; then \
	release_version=yes
fi;)	

if test $release_version = no; then 
  CFLAGS=`echo $CFLAGS | sed s/-O2//`
  CXXFLAGS=`echo $CXXFLAGS | sed s/-O2//`
  CPPFLAGS=`echo $CPPFLAGS | sed s/-O2//`
fi



dnl compiler checks
# if using gcc...
if test "$ac_cv_prog_gcc" = yes; then
  STANDARD_CFLAGS=
  MAINTAINER_CFLAGS="-Wall -Wshadow -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wredundant-decls"
else
  STANDARD_CFLAGS=
  MAINTAINER_CFLAGS=
fi



dnl Checks for libraries.
dnl GNU GDBM
AC_CHECK_HEADERS(gdbm.h)
if test "$ac_cv_header_gdbm_h" = yes ; then
  oLIBS="$LIBS"
  AC_CHECK_LIB(gdbm,gdbm_firstkey)
  LIBS="$oLIBS"
fi

dnl Berkeley DB
AC_ARG_WITH(bdb, [  --with-bdb=ROOT            Berkeley DB install area [/usr]], bdb_prefix="$withval", bdb_prefix="/usr") 

AC_MSG_CHECKING(location of BDB)
AC_MSG_RESULT($bdb_prefix)
if test "$bdb_prefix" != no; then
  oCFLAGS="$CFLAGS"
  oLDFLAGS="$LDFLAGS"
  oLIBS="$LIBS"
  if test "$bdb_prefix" != /usr; then
    nLDFLAGS="-L$bdb_prefix/lib $LDFLAGS";
    CFLAGS="-I$bdb_prefix/include $CFLAGS";
  else
    nLDFLAGS="$LDFLAGS"
  fi
  LDFLAGS="$nLDFLAGS"
  AC_CHECK_HEADERS(db.h)
  if test "$ac_cv_header_db_h" = yes ; then
    LIBS="$oLIBS"
    AC_CHECK_LIB(db, db_create)
    LIBS="$oLIBS"
    AC_CHECK_LIB(db, db_open)
    LIBS="$oLIBS"
    AC_CHECK_LIB(db, dbopen)
    LIBS="$oLIBS -ldb"
    LDFLAGS="$nLDFLAGS"
    have_libdb=no
    if test "$ac_cv_lib_db_db_create" = yes; then
      AC_DEFINE(HAVE_DB_CREATE)
      have_libdb=yes
    elif test "$ac_cv_lib_db_db_open" = yes; then
      AC_DEFINE(HAVE_DB_OPEN)
      have_libdb=yes
    elif test "$ac_cv_lib_db_dbopen" = yes; then
      AC_DEFINE(HAVE_DBOPEN)
      AC_MSG_WARN(Berkeley DB version 1 found - this is not supported)
      have_libdb=no
    fi
    AC_MSG_CHECKING(whether DB_TXN defined in db.h)
    dnl In BDB, DB_TXN is a pointer to a structure never defined
    AC_TRY_LINK([#include <stdio.h>
                 #include <db.h>], [DB_TXN* ptr=(DB_TXN*)NULL],
		AC_DEFINE(HAVE_BDB_DB_TXN)
		AC_MSG_RESULT(yes),
		AC_MSG_RESULT(no))
    AC_MSG_CHECKING(whether DBC defined in db.h)
    AC_TRY_LINK([#include <db.h>], [size_t len=sizeof(DBC)],
		AC_DEFINE(HAVE_BDB_CURSOR)
		AC_MSG_RESULT(yes),
		AC_MSG_RESULT(no))
    AC_MSG_CHECKING(number of arguments to db_cursor)
    AC_TRY_LINK([#include <stdio.h>
                 #include <db.h>], [DB* db; db->cursor(db, NULL, NULL, 0);],
		AC_DEFINE(HAVE_BDB_CURSOR_4_ARGS)
		AC_MSG_RESULT(4),
		AC_MSG_RESULT(3))
  fi

  if test "$have_libdb" != yes; then
    LIBS="$oLIBS"
    LDFLAGS="$oLDFLAGS"
    CFLAGS="$oCFLAGS"
   fi

fi

if test "$have_libdb" != yes; then
  AC_MSG_WARN(No persistant storage configured)
fi


dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(stdlib.h unistd.h string.h fcntl.h dmalloc.h stdarg.h)
AC_CHECK_HEADERS(expat.h xmlparse.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_BIGENDIAN

AC_CHECK_TYPE(byte, MISSING)
AC_CHECK_TYPE(u16, MISSING)
AC_CHECK_TYPE(u32, MISSING)

AC_CHECK_SIZEOF(unsigned char, 1)
AC_CHECK_SIZEOF(unsigned short, 2)
AC_CHECK_SIZEOF(unsigned int, 4)
AC_CHECK_SIZEOF(unsigned long, 4)
AC_CHECK_SIZEOF(unsigned long long, 8)

if test "$ac_cv_sizeof_unsigned_short" = "0" \
   || test "$ac_cv_sizeof_unsigned_int" = "0" \
   || test "$ac_cv_sizeof_unsigned_long" = "0"; then
    AC_MSG_WARN([Hmmm, something is wrong with the sizes - using defaults]);
fi

dnl Checks for library functions.
AC_FUNC_MEMCMP
AC_CHECK_FUNCS(mkstemp mktemp tmpnam)

dnl Checks for URI resolvers
AC_ARG_WITH(libwww, [  --with-libwww           Use libwww [yes]], enable_libwww="$withval", enable_libwww="yes") 

have_libwww=
AC_MSG_CHECKING(whether have working libwww)
if test "$enable_libwww" = yes ; then
  if test -n "$LIBWWW_CONFIG"; then
    AC_MSG_RESULT(yes)
    LIBS="$LIBS `$LIBWWW_CONFIG --libs`"
    CFLAGS="$CFLAGS `$LIBWWW_CONFIG --cflags`"
    AC_DEFINE(HAVE_LIBWWW)
    have_libwww=yes
  else
    AC_MSG_RESULT(no)
  fi
else
  AC_MSG_RESULT(no)
fi


dnl Checks for XML parsers
have_expat=0
have_expat_lib=0
have_expat_source=0
need_expat=0
need_expat_source=0
AC_MSG_CHECKING(for expat sources)
if test -d $srcdir/expat; then
  have_expat_source=1
  have_expat=1
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi

oLIBS="$LIBS"
AC_CHECK_LIB(xmltok, main, xmlt=1, xmlt=0)

# Rapier only needs XML_ParserCreate but Repat needs
# XML_ParserCreateNS so check for that
AC_CHECK_LIB(xmlparse, XML_ParserCreateNS, xmlp=1, xmlp=0, -lxmltok)

LIBS="$oLIBS"

AC_CHECK_LIB(expat, XML_SetNamespaceDeclHandler, libexpat=1, libexpat=0)

REPAT_FLAGS=

LIBS="$oLIBS"
AC_MSG_CHECKING(for system expat library)
if test $xmlp = 1 -a $xmlt = 1 -a  $ac_cv_header_xmlparse_h = yes; then
  # Old expat
  have_expat_lib=1
  have_expat=1
  expat_libs="-lxmlparse -lxmltok"

  AC_DEFINE(RDFPARSE_INCLUDE_XMLPARSE)
  REPAT_FLAGS="$REPAT_FLAGS -DRDFPARSE_INCLUDE_XMLPARSE=1"

  AC_MSG_RESULT(yes - libxmlparse and libxmltok)
elif test $libexpat = 1 -a $ac_cv_header_expat_h = yes ; then
  # New expat - expat-1.95.0 or later
  have_expat_lib=1
  have_expat=1
  expat_libs="-lexpat"

  AC_MSG_RESULT(yes - libexpat)
else
  AC_MSG_RESULT(no)
fi

AC_CHECK_PROG(XML_CONFIG, xml-config, xml-config)


have_libxml=0
have_libxml_lib=0
have_libxml_source=0
need_libxml=0
need_libxml_source=0
AC_MSG_CHECKING(for libxml sources)
if test -d $srcdir/libxml -a -r $srcdir/libxml/libxml.spec ; then
  have_libxml_source=1
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi

if test "X$XML_CONFIG" != X; then
  oLIBS="$LIBS"
  LIBS="$LIBS `$XML_CONFIG --libs`"
  AC_CHECK_LIB(xml, xmlParseFile)
  LIBS="$oLIBS"
  AC_MSG_CHECKING(for system (GNOME) libxml library)
  if test $ac_cv_lib_xml_xmlParseFile = yes; then
    have_libxml_lib=1
    have_libxml=1
    AC_MSG_RESULT(yes)
  else
    AC_MSG_RESULT(no)
  fi
fi
AC_CHECK_HEADERS(gnome-xml/parser.h)


dnl Checks for RDF parsers
parser_modules="repat rapier sirpac-stanford sirpac-w3c libwww"

AC_MSG_CHECKING(RDF parsers required)
AC_ARG_ENABLE(parsers, [  --enable-parsers=LIST   Use RDF parsers [repat rapier sirpac-stanford sirpac-w3c libwww]], parser_modules="$enableval") 
if test "X$parser_modules" = "no" -o "X$parser_modules" = X; then
  parser_modules=
fi
AC_MSG_RESULT($parser_modules)

PARSER_OBJS=
PARSER_SRCS=
JAVA_SIRPACSTANFORD_JAR=
JAVA_SIRPACW3C_JAR=
JAVA_SAX_JAR=
JAVA_SAX_CLASS=
JAVA_CLASSES=


# This is needed because autoheader can't work out which computed
# symbols must be pulled from acconfig.h into config.h.in
if test "x" = "y"; then
  AC_DEFINE(HAVE_RAPIER_RDF_PARSER)
  AC_DEFINE(HAVE_REPAT_RDF_PARSER)
  AC_DEFINE(HAVE_SIRPAC_RDF_PARSER)
  AC_DEFINE(HAVE_LIBWWW_RDF_PARSER)
fi

# old:
# AC_ARG_WITH(rdf-java-api, [  --with-rdf-java-api=JAR Use the Java RDF API in the given jar file [no]], java_rdf_jar="$withval", java_rdf_jar="no") 

AC_ARG_WITH(java-sirpac-stanford-jar, [  --with-java-sirpac-stanford-jar=JAR Use the SiRPAC (Stanford version) jar file [no]], java_sirpac_stanford_jar="$withval", java_sirpac_stanford_jar="no") 

AC_ARG_WITH(java-sirpac-w3c-jar, [  --with-java-sirpac-w3c-jar=JAR Use the SiRPAC (W3C version) jar file [no]], java_sirpac_w3c_jar="$withval", java_sirpac_w3c_jar="no") 

AC_ARG_WITH(java-sax-jar, [  --with-java-sax-jar=JAR Use the Java SAX implementation in the given jar file [no]], java_sax_jar="$withval", java_sax_jar="no") 
AC_ARG_WITH(java-sax-class, [  --with-java-sax-class=CLASS  Give the Java SAX class name for the SAX jar file [no]], java_sax_class="$withval", java_sax_class="no") 

have_sirpac=0

have_sirpac_stanford=0
AC_MSG_CHECKING(whether using Java SiRPAC - Stanford version)
if test "$java_sirpac_stanford_jar" != no ; then
  AC_DEFINE_UNQUOTED(JAVA_SIRPACSTANFORD_JAR, "$java_sirpac_stanford_jar")
  if test -r $java_sirpac_stanford_jar; then
    AC_MSG_RESULT(yes)
    if test "X$java_sax_class" = no ; then
      # was: com.microstar.xml.SAXDriver
      java_sax_class=org.brownell.xml.aelfred2.SAXDriver
    fi
    have_sirpac_stanford=1
    have_sirpac=1
  else
    AC_MSG_RESULT(no - JAR file $java_sirpac_stanford_jar does not exist)
  fi
else
  AC_MSG_RESULT(no)
fi


have_sirpac_w3c=0
AC_MSG_CHECKING(whether using Java SiRPAC - W3C version)
if test "$java_sirpac_w3c_jar" != no ; then
  AC_DEFINE_UNQUOTED(JAVA_SIRPACW3C_JAR, "$java_sirpac_w3c_jar")
  if test -r $java_sirpac_w3c_jar; then
    AC_MSG_RESULT(yes)
    have_sirpac_w3c=1
    have_sirpac=1
  else
    AC_MSG_RESULT(no - JAR file $java_sirpac_w3c_jar does not exist)
  fi
else
  AC_MSG_RESULT(no)
fi



have_sax=0
AC_MSG_CHECKING(whether using Java SAX)
if test "$java_sax_jar" != no ; then
  AC_DEFINE_UNQUOTED(JAVA_SAX_JAR, "$java_sax_jar")
  if test -r $java_sax_jar; then
    if test "$java_sax_class" != no ; then
      AC_MSG_RESULT(yes)
      JAVA_SAX_JAR=$java_sax_jar
      JAVA_SAX_CLASS=$java_sax_class
      have_sax=1
    else
      AC_MSG_RESULT(no - SAX class must given with --with-java-sax-class)
    fi
  else
    AC_MSG_RESULT(no - JAR file $java_sax_jar does not exist)
  fi
else
  AC_MSG_RESULT(no)
fi
AC_DEFINE_UNQUOTED(JAVA_SAX_JAR, "$java_sax_jar")
AC_DEFINE_UNQUOTED(JAVA_SAX_CLASS, "$java_sax_class")


seen_sirpac=0
parsers_available=
for parser in $parser_modules; do
  uname=`echo $parser | tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`
  found=0
  original_parser=$parser

  case $parser in
    sirpac-stanford)
      if test $have_sirpac_stanford = 1 ; then
	found=1
        parser=sirpac
      fi
    ;;

    sirpac-w3c)
      if test $have_sirpac_w3c = 1 ; then
        if test $have_sax = 1 ; then
  	  found=1
          parser=sirpac
        else
          AC_MSG_WARN(Cannot use SiRPAC W3C version - no SAX jar and class given)
        fi
      fi
    ;;
  
    libwww)
      AC_MSG_CHECKING(whether libwww has RDF support)
      if test "$have_libwww" = yes ; then
	AC_TRY_LINK([#undef PACKAGE
		     #undef VERSION
		     #include <WWWXML.h>], [HTRDF* rdfp=HTRDF_new();],
		    AC_DEFINE(HAVE_LIBWWW_RDF)
                    found=1
		    AC_MSG_RESULT(yes),
		    AC_MSG_RESULT(no))
      else
	AC_MSG_RESULT(no)
      fi
    ;;

    rapier)
      if test $have_expat_lib = 1; then
        need_expat=1
        found=1
        AC_DEFINE(NEED_EXPAT)
      elif test $have_expat_source = 1; then
        need_expat=1
        need_expat_source=1
        found=1
        AC_DEFINE(NEED_EXPAT)
      elif test $have_libxml_lib = 1; then
        need_libxml=1
	found=1
        AC_DEFINE(NEED_LIBXML)
      elif test $have_libxml_source = 1; then
        need_libxml=1
        need_libxml_source=1
        found=1
        AC_DEFINE(NEED_LIBXML)
      fi
        
      ;;
    repat)
      if test $have_expat_lib = 1; then
        need_expat=1
        found=1
        AC_DEFINE(NEED_EXPAT)
      elif test $have_expat_source = 1; then
        need_expat=1
        need_expat_source=1
        found=1
        AC_DEFINE(NEED_EXPAT)
      fi
      need_repat=1
      ;;
    *)
      AC_MSG_ERROR(No such parser $parser)
  esac

  if test $found = 1; then
    parsers_available="$parsers_available $original_parser"
  fi

  # Only add sirpac parser module once even if many sirpac-* parsers are used
  if test $parser = sirpac; then
    uname=`echo $parser | tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`
    if test $seen_sirpac = 1; then
      found=0
    else
      seen_sirpac=1
      JAVA_CLASSES="$JAVA_CLASSES PrintConsumer.class PrintParser.class"
    fi
  fi

  # Add objects, sources only if the parser was found
  if test $found = 1; then
    PARSER_OBJS="$PARSER_OBJS rdf_parser_$parser.o"
    PARSER_SRCS="$PARSER_SRCS rdf_parser_$parser.c"

    if test $parser = rapier; then
      PARSER_OBJS="$PARSER_OBJS rapier_parse.o"
      PARSER_SRCS="$PARSER_SRCS rapier_parse.c"
    fi

    n=HAVE_${uname}_RDF_PARSER
    AC_DEFINE_UNQUOTED($n)
  fi
done
AC_MSG_CHECKING(RDF parsers available)
AC_MSG_RESULT($parsers_available)



dnl Checks for languages
AC_SUBST(JAVA_CLASSES)
AC_DEFINE_UNQUOTED(JAVA_CLASS_DIR, "$prefix/share/$PACKAGE")

if test "X$PYTHON" != X; then

  dnl need to change quotes to allow square brackets
  changequote(<<, >>)dnl
  python_version=`$PYTHON -c 'import sys; print sys.version[:3]'`
  python_prefix=`$PYTHON -c 'import sys; print sys.prefix'`
  changequote([, ])dnl

  # What a crock
  PYTHON_INCLUDES="-I$python_prefix/include/python$python_version"
  AC_SUBST(PYTHON_INCLUDES)
else
  # This allows 'make clean' in the python directory to work when
  # python isn't available
  PYTHON=:
fi

AC_SUBST(PARSER_OBJS)
AC_SUBST(PARSER_SRCS)

if test "X$PARSER_OBJS" = X; then
  AC_MSG_WARN(No RDF parser configured)
fi



AC_MSG_CHECKING(XML parsers required)
result=
if test $need_libxml = 1; then
  if test $need_libxml_source = 1; then
    result="$result libxml(source)"
  else
    result="$result libxml(system)"
  fi
fi
if test $need_expat = 1; then
  if test $need_expat_source = 1; then
    result="$result expat(source)"
  else
    result="$result expat(system)"
  fi
fi
AC_MSG_RESULT($result)



dnl Checks for modules
digest_modules="md5 sha1 ripemd160"

AC_MSG_CHECKING(digests wanted)
AC_ARG_ENABLE(digests, [  --enable-digests=LIST   Use digests [md5 sha1 ripemd160]], digest_modules="$enableval") 
AC_MSG_RESULT($digest_modules)

DIGEST_OBJS=
DIGEST_SRCS=

AC_ARG_WITH(openssl-digests, [  --with-openssl-digests  Use openssl digests [yes]], enable_openssl_digests="$withval", enable_openssl_digests="yes") 

# This is needed because autoheader can't work out which computed
# symbols must be pulled from acconfig.h into config.h.in
if test "x" = "y"; then
  AC_DEFINE(HAVE_OPENSSL_CRYPTO_MD5_DIGEST)
  AC_DEFINE(HAVE_OPENSSL_CRYPTO_SHA1_DIGEST)
  AC_DEFINE(HAVE_OPENSSL_CRYPTO_RIPEMD160_DIGEST)
fi

AC_MSG_CHECKING(whether to use openssl digests)
if test "$enable_openssl_digests" = yes ; then
  AC_MSG_RESULT(yes)
  AC_CHECK_HEADERS(openssl/crypto.h)
  if test "$ac_cv_header_openssl_crypto_h" = yes ; then
    AC_DEFINE(HAVE_OPENSSL_DIGESTS)
    new_digest_modules=
    oLIBS="$LIBS"
    LIBS="-lcrypto $LIBS"
    have_libcrypto=no

    for module in $digest_modules; do
      func=`echo $module | tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`
      found=
      AC_MSG_CHECKING(for openssl $func digest module)
      AC_CACHE_VAL(ac_cv_lib_crypto_$func,
                   [AC_TRY_LINK(, $func(),
                   [eval "ac_cv_lib_crypto_$func=yes"],
                   [eval "ac_cv_lib_crypto_$func=no"])])
      if eval "test \"`echo '$ac_cv_lib_crypto_'$func`\" = yes"; then
	AC_MSG_RESULT(yes)
	n=HAVE_OPENSSL_CRYPTO_${func}_DIGEST
	AC_DEFINE_UNQUOTED($n)
        have_libcrypto=yes
      else
	AC_MSG_RESULT(no)
	new_digest_modules="${new_digest_modules} $module"
      fi
    done
    if test "$have_libcrypto" = no; then
      LIBS="$oLIBS"
    fi
    DIGEST_OBJS="$DIGEST_OBJS rdf_digest_openssl.o"
    DIGEST_SRCS="$DIGEST_SRCS rdf_digest_openssl.c"
    digest_modules=$new_digest_modules
  fi
else
  AC_MSG_RESULT(no)
fi


# This is needed because autoheader can't work out which computed
# symbols must be pulled from acconfig.h into config.h.in
if test "x" = "y"; then
  AC_DEFINE(HAVE_LOCAL_MD5_DIGEST)
  AC_DEFINE(HAVE_LOCAL_SHA1_DIGEST)
  AC_DEFINE(HAVE_LOCAL_RIPEMD160_DIGEST)
fi

# Maybe add some local digest modules
for module in $digest_modules; do
  module_u=`echo $module | tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`
  AC_MSG_CHECKING(for local $module digest module)
  base=rdf_digest_$module
  if test -r $srcdir/$base.c; then
    AC_MSG_RESULT(yes);

    n=HAVE_LOCAL_${module_u}_DIGEST
    AC_DEFINE_UNQUOTED($n)

    DIGEST_OBJS="$DIGEST_OBJS $base.o"
    DIGEST_SRCS="$DIGEST_SRCS $base.c"
  else
    AC_MSG_RESULT(no);
  fi
done

AC_SUBST(DIGEST_OBJS)
AC_SUBST(DIGEST_SRCS)


HASH_OBJS=
HASH_SRCS=

# GDBM is not available anymore because it cannot handle duplicate
# keys, without extra support. Dave -- 2000-08-11
#
#AC_MSG_CHECKING(for libgdbm support)
#if test "$ac_cv_lib_gdbm_gdbm_firstkey" = yes ; then
#  AC_MSG_RESULT(yes);
#  AC_DEFINE(HAVE_GDBM_HASH)
#  HASH_OBJS="$HASH_OBJS rdf_hash_gdbm.o"
#  HASH_SRCS="$HASH_SRCS rdf_hash_gdbm.o"
#else
#  AC_MSG_RESULT(no);
#fi

AC_MSG_CHECKING(for bdb hash support)
if test "$have_libdb" = yes; then
  AC_MSG_RESULT(yes);
  AC_DEFINE(HAVE_BDB_HASH)
  HASH_OBJS="$HASH_OBJS rdf_hash_bdb.o"
  HASH_SRCS="$HASH_SRCS rdf_hash_bdb.o"
else
  AC_MSG_RESULT(no);
fi


AC_SUBST(HASH_OBJS)
AC_SUBST(HASH_SRCS)


dnl Checks for building sub-packages in sub directories
SD="docs perl python tcl"


XML_OBJS=

if test $have_libxml = 1 -a $need_libxml = 1; then
  if test $need_libxml_source = 1; then
    SD="$SD libxml"
    (cd libxml && ./configure --cache=../config.cache --enable-shared=no)
    CFLAGS="$CFLAGS -I$srcdir/libxml"
    XML_OBS="libxml/libxml.a"
  else
    LIBS="$LIBS `$XML_CONFIG --libs`"
    CFLAGS="$CFLAGS `$XML_CONFIG --cflags`"
  fi
fi

if test $need_expat = 1; then
  # Only build local copy if it is needed
  if test $need_expat_source = 1; then
    SD="$SD expat"
    CFLAGS="-I\$(top_srcdir)/expat/xmlparse $CFLAGS"
    XML_OBJS="\$(top_builddir)/expat/xmlparse/xmlparse.o \$(top_builddir)/expat/xmlparse/hashtable.o \$(top_builddir)/expat/xmltok/xmlrole.o \$(top_builddir)/expat/xmltok/xmltok.o"
    REPAT_FLAGS="$REPAT_FLAGS -I\$(top_srcdir)/expat/xmlparse"

    AC_DEFINE(NEED_EXPAT_SOURCE)
    # FIXME - when expat in source tree is updated to new (sourceforge)
    # version then need to remove these two lines:
    AC_DEFINE(RDFPARSE_INCLUDE_XMLPARSE)
    REPAT_FLAGS="$REPAT_FLAGS -DRDFPARSE_INCLUDE_XMLPARSE=1"
  else
    LIBS="$LIBS $expat_libs"
  fi
fi

if test $need_repat = 1; then
  # Always have local copy
  SD="$SD repat"
  XML_OBJS="$XML_OBJS \$(top_builddir)/repat/rdfparse.o"
fi

AC_SUBST(REPAT_FLAGS)
AC_SUBST(XML_OBJS)
AC_SUBST(SD)


# Make final changes to cflags
CFLAGS="-DLIBRDF_INTERNAL=1 $CFLAGS"
MEM=
MEM_LIBS=
if test "$USE_MAINTAINER_MODE" = yes; then
  #MEM=-DLIBRDF_MEMORY_DEBUG_DMALLOC=1
  #MEM_LIBS=-ldmalloc
  MEM=-DLIBRDF_MEMORY_DEBUG=1
  MEM_LIBS=
  CFLAGS="-DLIBRDF_DEBUG=1 $CFLAGS"
fi
STANDARD_CFLAGS="$STANDARD_CFLAGS $CFLAGS"
if test "$USE_MAINTAINER_MODE" = yes; then
  CFLAGS="$MAINTAINER_CFLAGS $CFLAGS"
fi
AC_SUBST(MEM)
AC_SUBST(MEM_LIBS)
AC_SUBST(STANDARD_CFLAGS)


AC_OUTPUT(Makefile
docs/Makefile
expat/Makefile
expat/xmlparse/Makefile
expat/xmltok/Makefile
perl/Makefile
perl/lib/Makefile
perl/lib/RDF/Makefile
python/Makefile
python/test/Makefile
tcl/Makefile
repat/Makefile
debian/Makefile
debian/rules
redland.spec
redland-config,
[chmod +x redland-config debian/rules])

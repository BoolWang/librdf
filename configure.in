dnl
dnl Configure for librdf
dnl
dnl (Process this file with autoconf to produce a configure script.)

AC_REVISION($Revision$)dnl

AC_PREREQ(2.13)
AC_INIT(rdf_node.c)
AM_CONFIG_HEADER(config.h)

AM_INIT_AUTOMAKE(librdf, 1.0)

AM_MAINTAINER_MODE

dnl Checks for programs.
AC_CANONICAL_HOST
AC_ARG_PROGRAM
AM_SANITY_CHECK
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_RANLIB

AM_MISSING_PROG(ACLOCAL, aclocal, $missing_dir)
AM_MISSING_PROG(AUTOCONF, autoconf, $missing_dir)
AM_MISSING_PROG(AUTOMAKE, automake, $missing_dir)
AM_MISSING_PROG(AUTOHEADER, autoheader, $missing_dir)


dnl Checks for libraries.
dnl GNU GDBM
AC_CHECK_HEADERS(gdbm.h)
if test "$ac_cv_header_gdbm_h" = yes ; then
  AC_CHECK_LIB(gdbm,gdbm_firstkey)
fi

dnl Berkeley DB
AC_CHECK_HEADERS(db.h)
if test "$ac_cv_header_db_h" = yes ; then
  AC_CHECK_LIB(db, db_create)
  AC_CHECK_LIB(db, db_open)
  if test "$ac_cv_lib_db_db_create" = yes; then
    AC_DEFINE(HAVE_DB_CREATE)
  fi
  if test "$ac_cv_lib_db_db_open" = yes; then
    AC_DEFINE(HAVE_DB_OPEN)
  fi
  AC_MSG_CHECKING(whether DB_TXN defined in db.h)
  dnl In BDB, DB_TXN is a pointer to a structure never defined
  AC_TRY_LINK([#include <db.h>], [DB_TXN* ptr=(DB_TXN*)NULL],
              AC_DEFINE(HAVE_BDB_DB_TXN)
	      AC_MSG_RESULT(yes),
	      AC_MSG_RESULT(no))
  AC_MSG_CHECKING(whether DBC defined in db.h)
  AC_TRY_LINK([#include <db.h>], [size_t len=sizeof(DBC)],
              AC_DEFINE(HAVE_BDB_CURSOR)
	      AC_MSG_RESULT(yes),
	      AC_MSG_RESULT(no))
fi



dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(stdlib.h unistd.h string.h fcntl.h)


dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_C_BIGENDIAN

AC_CHECK_TYPE(byte, MISSING)
AC_CHECK_TYPE(u16, MISSING)
AC_CHECK_TYPE(u32, MISSING)

AC_CHECK_SIZEOF(unsigned char, 1)
AC_CHECK_SIZEOF(unsigned short, 2)
AC_CHECK_SIZEOF(unsigned int, 4)
AC_CHECK_SIZEOF(unsigned long, 4)
AC_CHECK_SIZEOF(unsigned long long, 8)

if test "$ac_cv_sizeof_unsigned_short" = "0" \
   || test "$ac_cv_sizeof_unsigned_int" = "0" \
   || test "$ac_cv_sizeof_unsigned_long" = "0"; then
    AC_MSG_WARN([Hmmm, something is wrong with the sizes - using defaults]);
fi


dnl Checks for library functions.


dnl Checks for URI resolvers
AC_ARG_WITH(libwww, [  --with-libww  Use libwww [yes]], enable_libwww="$withval", enable_libwww="yes") 

AC_MSG_CHECKING(whether to use libwww)
if test "$enable_libwww" = yes ; then
  AC_MSG_RESULT(yes)
  AC_CHECK_PROG(LIBWWW_CONFIG, libwww-config, yes, no)
  if test "$LIBWWW_CONFIG" = yes; then
    LIBS="`libwww-config --libs` $LIBS"
    CFLAGS="`libwww-config --cflags` $CFLAGS"
    AC_DEFINE(HAVE_LIBWWW)
  fi
else
  AC_MSG_RESULT(no)
fi


dnl Checks for modules
digest_modules="md5 sha1 ripemd160"

AC_MSG_CHECKING(digests wanted)
AC_ARG_ENABLE(digests, [  --enable-digests=LIST   Use digests [md5 sha1 ripemd160]], digest_modules="$enableval") 
AC_MSG_RESULT($digest_modules)

DIGEST_OBJS=
DIGEST_SRCS=

AC_ARG_WITH(openssl-digests, [  --with-openssl-digests  Use openssl digests [yes]], enable_openssl_digests="$withval", enable_openssl_digests="yes") 

AC_MSG_CHECKING(whether to use openssl digests)
if test "$enable_openssl_digests" = yes ; then
  AC_MSG_RESULT(yes)
  AC_CHECK_HEADERS(openssl/crypto.h)
  if test "$ac_cv_header_openssl_crypto_h" = yes ; then
    AC_DEFINE(HAVE_OPENSSL_DIGESTS)
    new_digest_modules=
    oLIBS="$LIBS"
    have_libcrypto=

    for module in $digest_modules; do
      func=`echo $module | tr 'a-z' 'A-Z'`
      # This is needed because autoheader can't work out which computed
      # symbols must be pulled from acconfig.h into config.h.in
      found=
      case "$func" in
        MD5)
	  AC_CHECK_LIB(crypto, MD5)
          if test "$ac_cv_lib_crypto_MD5"; then
            AC_DEFINE(HAVE_OPENSSL_CRYPTO_MD5_DIGEST)
	    found=yes
          fi
	  ;;
        SHA1)
	  AC_CHECK_LIB(crypto, SHA1)
          if test "$ac_cv_lib_crypto_SHA1"; then
            AC_DEFINE(HAVE_OPENSSL_CRYPTO_SHA1_DIGEST)
	    found=yes
          fi
	  ;;
        RIPEMD160)
	  AC_CHECK_LIB(crypto, RIPEMD160)
          if test "$ac_cv_lib_crypto_RIPEMD160"; then
            AC_DEFINE(HAVE_OPENSSL_CRYPTO_RIPEMD160_DIGEST)
	    found=yes
          fi
	  ;;
        esac
      if test "$found" = yes; then
        have_libcrypto=yes
      else
	new_digest_modules="${new_digest_modules} $module"
      fi
    done
    if test "$have_libcrypto" = yes; then
      LIBS="-lcrypto $oLIBS"
    else
      LIBS="$oLIBS"
    fi
    DIGEST_OBJS="$DIGEST_OBJS rdf_digest_openssl.o"
    DIGEST_SRCS="$DIGEST_SRCS rdf_digest_openssl.c"
    digest_modules=$new_digest_modules
  fi
else
  AC_MSG_RESULT(no)
fi


# Maybe add some local digest modules
for module in $digest_modules; do
  module_u=`echo $module | tr 'a-z' 'A-Z'`
  AC_MSG_CHECKING(for local $module digest module)
  if test -r $srcdir/$module.c; then
    AC_MSG_RESULT(yes);
    # This is needed because autoheader can't work out which computed
    # symbols must be pulled from acconfig.h into config.h.in
    case "$module_u" in
      MD5) AC_DEFINE(HAVE_LOCAL_MD5_DIGEST) ;;
      SHA1) AC_DEFINE(HAVE_LOCAL_SHA1_DIGEST) ;;
    esac
    DIGEST_OBJS="$DIGEST_OBJS $module.o"
    DIGEST_SRCS="$DIGEST_SRCS $module.c"
  else
    AC_MSG_RESULT(no);
  fi
done

AC_SUBST(DIGEST_OBJS)
AC_SUBST(DIGEST_SRCS)


HASH_OBJS=
HASH_SRCS=
AC_MSG_CHECKING(for libgdbm support)
if test "$ac_cv_lib_gdbm_gdbm_firstkey" = yes ; then
  AC_MSG_RESULT(yes);
  AC_DEFINE(HAVE_GDBM_HASH)
  HASH_OBJS="$HASH_OBJS rdf_hash_gdbm.o"
  HASH_SRCS="$HASH_SRCS rdf_hash_gdbm.o"
else
  AC_MSG_RESULT(no);
fi

AC_MSG_CHECKING(for libdb support)
if test "$ac_cv_lib_db_db_open" = yes ; then
  AC_MSG_RESULT(yes);
  AC_DEFINE(HAVE_BDB_HASH)
  HASH_OBJS="$HASH_OBJS rdf_hash_bdb.o"
  HASH_SRCS="$HASH_SRCS rdf_hash_bdb.o"
else
  AC_MSG_RESULT(no);
fi


AC_SUBST(HASH_OBJS)
AC_SUBST(HASH_SRCS)


AC_OUTPUT([Makefile docs/Makefile])

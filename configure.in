dnl -*- Mode: sh -*-
dnl
dnl configure.in - top level autoconf file for Redland
dnl (Process this file with autoconf to produce a configure script.)
dnl
dnl $Id$
dnl
dnl Copyright (C) 2000 David Beckett - http://purl.org/net/dajobe/
dnl Institute for Learning and Research Technology, University of Bristol.
dnl
dnl    This package is Free Software available under either of two licenses
dnl    (see FAQS.html to see why):
dnl 
dnl 1. The GNU Lesser General Public License (LGPL)
dnl 
dnl    See http://www.gnu.org/copyleft/lesser.html or COPYING.LIB for the
dnl    full license text.
dnl      _________________________________________________________________
dnl 
dnl      Copyright (C) 2000 David Beckett, Institute for Learning and
dnl      Research Technology, University of Bristol. All Rights Reserved.
dnl 
dnl      This library is free software; you can redistribute it and/or
dnl      modify it under the terms of the GNU Lesser General Public License
dnl      as published by the Free Software Foundation; either version 2 of
dnl      the License, or (at your option) any later version.
dnl 
dnl      This library is distributed in the hope that it will be useful, but
dnl      WITHOUT ANY WARRANTY; without even the implied warranty of
dnl      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
dnl      Lesser General Public License for more details.
dnl 
dnl      You should have received a copy of the GNU Lesser General Public
dnl      License along with this library; if not, write to the Free Software
dnl      Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
dnl      USA
dnl      _________________________________________________________________
dnl 
dnl    NOTE - under Term 3 of the LGPL, you may choose to license the entire
dnl    library under the GPL. See COPYING for the full license text.
dnl 
dnl 2. The Mozilla Public License
dnl 
dnl    See http://www.mozilla.org/MPL/MPL-1.1.html or MPL.html for the full
dnl    license text.
dnl 
dnl    Under MPL section 13. I declare that all of the Covered Code is
dnl    Multiple Licensed:
dnl      _________________________________________________________________
dnl 
dnl      The contents of this file are subject to the Mozilla Public License
dnl      version 1.1 (the "License"); you may not use this file except in
dnl      compliance with the License. You may obtain a copy of the License
dnl      at http://www.mozilla.org/MPL/
dnl 
dnl      Software distributed under the License is distributed on an "AS IS"
dnl      basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
dnl      the License for the specific language governing rights and
dnl      limitations under the License.
dnl 
dnl      The Initial Developer of the Original Code is David Beckett.
dnl      Portions created by David Beckett are Copyright (C) 2000 David
dnl      Beckett, Institute for Learning and Research Technology, University
dnl      of Bristol. All Rights Reserved.
dnl 
dnl      Alternatively, the contents of this file may be used under the
dnl      terms of the GNU Lesser General Public License, in which case the
dnl      provisions of the LGPL License are applicable instead of those
dnl      above. If you wish to allow use of your version of this file only
dnl      under the terms of the LGPL License and not to allow others to use
dnl      your version of this file under the MPL, indicate your decision by
dnl      deleting the provisions above and replace them with the notice and
dnl      other provisions required by the LGPL License. If you do not delete
dnl      the provisions above, a recipient may use your version of this file
dnl      under either the MPL or the LGPL License.


AC_REVISION($Revision$)dnl

AC_PREREQ(2.13)
AC_INIT(rdf_node.c)
AM_CONFIG_HEADER(rdf_config.h)

AM_INIT_AUTOMAKE(librdf, 0.1)

AM_MAINTAINER_MODE

dnl Checks for programs.
AC_CANONICAL_HOST
AC_ARG_PROGRAM
AM_SANITY_CHECK
AM_PROG_CC_STDC
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_RANLIB
AC_CHECK_PROGS(JAVA, java jre)
AC_DEFINE_UNQUOTED(JAVA_COMMAND, "$JAVA")

AC_CHECK_PROG(LIBWWW_CONFIG, libwww-config, libwww-config)

AM_MISSING_PROG(ACLOCAL, aclocal, $missing_dir)
AM_MISSING_PROG(AUTOCONF, autoconf, $missing_dir)
AM_MISSING_PROG(AUTOMAKE, automake, $missing_dir)
AM_MISSING_PROG(AUTOHEADER, autoheader, $missing_dir)



dnl compiler checks
# if using gcc...
if test "$ac_cv_prog_gcc" = yes; then
  STANDARD_CFLAGS=
  MAINTAINER_CFLAGS="-Wall -Wshadow -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wredundant-decls"
else
  STANDARD_CFLAGS=
  MAINTAINER_CFLAGS=
fi



dnl Checks for libraries.
dnl GNU GDBM
AC_CHECK_HEADERS(gdbm.h)
if test "$ac_cv_header_gdbm_h" = yes ; then
  oLIBS="$LIBS"
  AC_CHECK_LIB(gdbm,gdbm_firstkey)
  LIBS="$oLIBS"
fi

dnl Berkeley DB
AC_ARG_WITH(bdb, [  --with-bdb=ROOT            Berkeley DB install area [/usr]], bdb_prefix="$withval", bdb_prefix="/usr") 

AC_MSG_CHECKING(location of BDB)
AC_MSG_RESULT($bdb_prefix)
if test "$bdb_prefix" != no; then
  oCFLAGS="$CFLAGS"
  oLIBS="$LIBS"
  if test "$bdb_prefix" != /usr; then
    nLIBS="-L$bdb_prefix/lib $LIBS";
    CFLAGS="-I$bdb_prefix/include $CFLAGS";
  else
    nLIBS="$LIBS"
  fi
  LIBS="$nLIBS"
  AC_CHECK_HEADERS(db.h)
  if test "$ac_cv_header_db_h" = yes ; then
    LIBS="$nLIBS"
    AC_CHECK_LIB(db, db_create)
    LIBS="$nLIBS"
    AC_CHECK_LIB(db, db_open)
    LIBS="$nLIBS"
    AC_CHECK_LIB(db, dbopen)
    LIBS="$nLIBS -ldb"
    have_libdb=no
    if test "$ac_cv_lib_db_db_create" = yes; then
      AC_DEFINE(HAVE_DB_CREATE)
      have_libdb=yes
    elif test "$ac_cv_lib_db_db_open" = yes; then
      AC_DEFINE(HAVE_DB_OPEN)
      have_libdb=yes
    elif test "$ac_cv_lib_db_dbopen" = yes; then
      AC_DEFINE(HAVE_DBOPEN)
      have_libdb=yes
    fi
    AC_MSG_CHECKING(whether DB_TXN defined in db.h)
    dnl In BDB, DB_TXN is a pointer to a structure never defined
    AC_TRY_LINK([#include <db.h>], [DB_TXN* ptr=(DB_TXN*)NULL],
		AC_DEFINE(HAVE_BDB_DB_TXN)
		AC_MSG_RESULT(yes),
		AC_MSG_RESULT(no))
    AC_MSG_CHECKING(whether DBC defined in db.h)
    AC_TRY_LINK([#include <db.h>], [size_t len=sizeof(DBC)],
		AC_DEFINE(HAVE_BDB_CURSOR)
		AC_MSG_RESULT(yes),
		AC_MSG_RESULT(no))
    AC_MSG_CHECKING(number of arguments to db_cursor)
    AC_TRY_LINK([#include <db.h>], [DB* db; db->cursor(db, NULL, NULL, 0);],
		AC_DEFINE(HAVE_BDB_CURSOR_4_ARGS)
		AC_MSG_RESULT(4),
		AC_MSG_RESULT(3))
  fi

  if test "$have_libdb" != yes; then
    LIBS="$oLIBS"
    CFLAGS="$oCFLAGS"
   fi

fi


dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(stdlib.h unistd.h string.h fcntl.h dmalloc.h)


dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_BIGENDIAN

AC_CHECK_TYPE(byte, MISSING)
AC_CHECK_TYPE(u16, MISSING)
AC_CHECK_TYPE(u32, MISSING)

AC_CHECK_SIZEOF(unsigned char, 1)
AC_CHECK_SIZEOF(unsigned short, 2)
AC_CHECK_SIZEOF(unsigned int, 4)
AC_CHECK_SIZEOF(unsigned long, 4)
AC_CHECK_SIZEOF(unsigned long long, 8)

if test "$ac_cv_sizeof_unsigned_short" = "0" \
   || test "$ac_cv_sizeof_unsigned_int" = "0" \
   || test "$ac_cv_sizeof_unsigned_long" = "0"; then
    AC_MSG_WARN([Hmmm, something is wrong with the sizes - using defaults]);
fi


dnl Checks for library functions.
AC_FUNC_MEMCMP

dnl Checks for URI resolvers
AC_ARG_WITH(libwww, [  --with-libww            Use libwww [yes]], enable_libwww="$withval", enable_libwww="yes") 

have_libwww=
AC_MSG_CHECKING(whether have working libwww)
if test "$enable_libwww" = yes ; then
  if test -n "$LIBWWW_CONFIG"; then
    AC_MSG_RESULT(yes)
    LIBS="$LIBS `$LIBWWW_CONFIG --libs`"
    CFLAGS="$CFLAGS `$LIBWWW_CONFIG --cflags`"
    AC_DEFINE(HAVE_LIBWWW)
    have_libwww=yes
  else
    AC_MSG_RESULT(no)
  fi
else
  AC_MSG_RESULT(no)
fi


dnl Checks for RDF parsers

PARSER_OBJS=
PARSER_SRCS=
AC_ARG_WITH(rdf-java-api, [  --with-rdf-java-api=JAR  Use the Java RDF API in the given jar file [no]], rdf_java_api_jar="$withval", rdf_java_api_jar="no") 
AC_MSG_CHECKING(whether to use Java RDF API)
if test "$rdf_java_api_jar" != no ; then
  AC_DEFINE_UNQUOTED(RDF_JAVA_API_JAR, "$rdf_java_api_jar")
  if test -r $rdf_java_api_jar; then
    AC_MSG_RESULT(yes)
    AC_DEFINE(HAVE_SIRPAC_RDF_PARSER)
    PARSER_OBJS="$PARSER_OBJS rdf_parser_sirpac.o"
    PARSER_SRCS="$PARSER_SRCS rdf_parser_sirpac.c"
  else
    AC_MSG_RESULT(no - JAR file $rdf_java_api_jar does not exist)
  fi
else
  AC_MSG_RESULT(no)
fi
AC_MSG_CHECKING(whether libwww has RDF support)
if test "$have_libwww" = yes ; then
  AC_TRY_LINK([#undef PACKAGE
               #undef VERSION
               #include <WWWXML.h>], [HTRDF* rdfp=HTRDF_new();],
              AC_DEFINE(HAVE_LIBWWW_RDF)
	      AC_DEFINE(HAVE_LIBWWW_RDF_PARSER)
	      PARSER_OBJS="$PARSER_OBJS rdf_parser_libwww.o"
	      PARSER_SRCS="$PARSER_SRCS rdf_parser_libwww.c"
	      AC_MSG_RESULT(yes),
	      AC_MSG_RESULT(no))
else
  AC_MSG_RESULT(no)
fi

AC_SUBST(PARSER_OBJS)
AC_SUBST(PARSER_SRCS)



dnl Checks for modules
digest_modules="md5 sha1 ripemd160"

AC_MSG_CHECKING(digests wanted)
AC_ARG_ENABLE(digests, [  --enable-digests=LIST   Use digests [md5 sha1 ripemd160]], digest_modules="$enableval") 
AC_MSG_RESULT($digest_modules)

DIGEST_OBJS=
DIGEST_SRCS=

AC_ARG_WITH(openssl-digests, [  --with-openssl-digests  Use openssl digests [yes]], enable_openssl_digests="$withval", enable_openssl_digests="yes") 

# This is needed because autoheader can't work out which computed
# symbols must be pulled from acconfig.h into config.h.in
if test "x" = "y"; then
  AC_DEFINE(HAVE_OPENSSL_CRYPTO_MD5_DIGEST)
  AC_DEFINE(HAVE_OPENSSL_CRYPTO_SHA1_DIGEST)
  AC_DEFINE(HAVE_OPENSSL_CRYPTO_RIPEMD160_DIGEST)
fi

AC_MSG_CHECKING(whether to use openssl digests)
if test "$enable_openssl_digests" = yes ; then
  AC_MSG_RESULT(yes)
  AC_CHECK_HEADERS(openssl/crypto.h)
  if test "$ac_cv_header_openssl_crypto_h" = yes ; then
    AC_DEFINE(HAVE_OPENSSL_DIGESTS)
    new_digest_modules=
    oLIBS="$LIBS"
    LIBS="-lcrypto $LIBS"
    have_libcrypto=no

    for module in $digest_modules; do
      func=`echo $module | tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`
      found=
      AC_MSG_CHECKING(for openssl $func digest module)
      AC_CACHE_VAL(ac_cv_lib_crypto_$func,
                   [AC_TRY_LINK(, $func(),
                   [eval "ac_cv_lib_crypto_$func=yes"],
                   [eval "ac_cv_lib_crypto_$func=no"])])
      if eval "test \"`echo '$ac_cv_lib_crypto_'$func`\" = yes"; then
	AC_MSG_RESULT(yes)
	n=HAVE_OPENSSL_CRYPTO_${func}_DIGEST
	AC_DEFINE_UNQUOTED($n)
        have_libcrypto=yes
      else
	AC_MSG_RESULT(no)
	new_digest_modules="${new_digest_modules} $module"
      fi
    done
    if test "$have_libcrypto" = no; then
      LIBS="$oLIBS"
    fi
    DIGEST_OBJS="$DIGEST_OBJS rdf_digest_openssl.o"
    DIGEST_SRCS="$DIGEST_SRCS rdf_digest_openssl.c"
    digest_modules=$new_digest_modules
  fi
else
  AC_MSG_RESULT(no)
fi


# This is needed because autoheader can't work out which computed
# symbols must be pulled from acconfig.h into config.h.in
if test "x" = "y"; then
  AC_DEFINE(HAVE_LOCAL_MD5_DIGEST)
  AC_DEFINE(HAVE_LOCAL_SHA1_DIGEST)
  AC_DEFINE(HAVE_LOCAL_RIPEMD160_DIGEST)
fi

# Maybe add some local digest modules
for module in $digest_modules; do
  module_u=`echo $module | tr 'abcdefghijklmnopqrstuvwxyz' 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`
  AC_MSG_CHECKING(for local $module digest module)
  base=rdf_digest_$module
  if test -r $srcdir/$base.c; then
    AC_MSG_RESULT(yes);

    n=HAVE_LOCAL_${module_u}_DIGEST
    AC_DEFINE_UNQUOTED($n)

    DIGEST_OBJS="$DIGEST_OBJS $base.o"
    DIGEST_SRCS="$DIGEST_SRCS $base.c"
  else
    AC_MSG_RESULT(no);
  fi
done

AC_SUBST(DIGEST_OBJS)
AC_SUBST(DIGEST_SRCS)


HASH_OBJS=
HASH_SRCS=

# GDBM is not available anymore because it cannot handle duplicate
# keys, without extra support. Dave -- 2000-08-11
#
#AC_MSG_CHECKING(for libgdbm support)
#if test "$ac_cv_lib_gdbm_gdbm_firstkey" = yes ; then
#  AC_MSG_RESULT(yes);
#  AC_DEFINE(HAVE_GDBM_HASH)
#  HASH_OBJS="$HASH_OBJS rdf_hash_gdbm.o"
#  HASH_SRCS="$HASH_SRCS rdf_hash_gdbm.o"
#else
#  AC_MSG_RESULT(no);
#fi

AC_MSG_CHECKING(for bdb hash support)
if test "$have_libdb" = yes; then
  AC_MSG_RESULT(yes);
  AC_DEFINE(HAVE_BDB_HASH)
  HASH_OBJS="$HASH_OBJS rdf_hash_bdb.o"
  HASH_SRCS="$HASH_SRCS rdf_hash_bdb.o"
else
  AC_MSG_RESULT(no);
fi


AC_SUBST(HASH_OBJS)
AC_SUBST(HASH_SRCS)


dnl Checks for packages
SD=docs

#if test -d libxml2-2.1.1; then 
#  SD="$SD libxml2-2.1.1"
#  (cd libxml2-2.1.1 && ./configure --cache=../config.cache --enable-shared=no)
#fi

#if test -d expat; then
#  SD="$SD expat"
#fi

AC_SUBST(SD)


# Make final changes to cflags
MEM=
MEM_LIBS=
if test "$USE_MAINTAINER_MODE" = yes; then
  #MEM=-DLIBRDF_MEMORY_DEBUG_DMALLOC=1
  #MEM_LIBS=-ldmalloc
  MEM=-DLIBRDF_MEMORY_DEBUG=1
  MEM_LIBS=
  CFLAGS="-DLIBRDF_DEBUG=1 $CFLAGS"
fi
STANDARD_CFLAGS="$STANDARD_CFLAGS $CFLAGS"
if test "$USE_MAINTAINER_MODE" = yes; then
  CFLAGS="$MAINTAINER_CFLAGS $CFLAGS"
fi
AC_SUBST(MEM)
AC_SUBST(MEM_LIBS)
AC_SUBST(STANDARD_CFLAGS)


AC_OUTPUT(Makefile
docs/Makefile
librdf-config,
[chmod +x librdf-config])

			     librdf 1.0


INTRODUCTION

librdf is a pluggable architecture written in C(*) for manipulating
RDF and experimenting with bits and pieces.

[(*)if you are thinking, why C - it is because it might be more
'portable' and easier to plug into other languages, systems and
applications.  However, it's written in an OO style.]


GETTING SOURCES FROM CVS ARCHIVE
  (if you have access to it - ILRT private at present)

    export CVSROOT=:pserver:LOGIN@cvs.desire.org:/usr/local/cvsroot
    export CVS_RSH=ssh
    cvs login
    cvs checkout

  where LOGIN is your login on the CVS server.

GETTING SOURCES FROM RELEASES

   See http://www.ilrt.bristol.ac.uk/people/cmdjb/software/librdf/

CONFIGURING
  If there is no configure program create it with:
    automake --add-missing
    aclocal
    autoheader
    autoconf


BUILDING
   ./configure
   make

TESTING
  Build and run the built in tests with:
    make check


			    RANDOM NOTES


Bits taken from public domain
-----------------------------
md5.c



Interface Design for 'Classes'
------------------------------

Prototypes and structures (aka Interface) in rdf_foo.h

Implementation and static variables in rdf_foo.c

simple constructor
  new_rdf_foo(void)
returns
  rdf_foo*

complex constructor(s)
  new_rdf_foo_from_X(X* x)
returns
  rdf_foo*

destructor
  free_rdf_foo(void)
returns
  rdf_foo*

class initialiser
   void init_rdf_foo(void)

methods
  ... rdf_foo_method1(...)
returns
  ...


methods called
   ..._as_string do not allocate a new string
   ..._to_string use RDF_MALLOC to create a new string that must be freed
